name: Deploy to EKS

on:
  push:
    branches: [ "develop" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java environment
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # ou outro, como 'zulu', 'adopt'
          java-version: '17' # Versão do Java compatível com sua aplicação

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Gradle permission
        run: chmod +x gradlew

      # Step 3: Build the application with Gradle
      - name: Build with Gradle
        run: ./gradlew clean build

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 6: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .

      # Step 7: Push Docker image to Amazon ECR
      - name: Push Docker image to Amazon ECR
        run: |
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 8: Update kubeconfig to use EKS cluster
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Create namespace
        run: |
          kubectl apply -f infra/namespace-customer.yml

      - name: Deploy application
        run: |
          kubectl apply -f infra/deployment.yml -n customer-namespace

      - name: Create service
        run: |
          kubectl apply -f infra/service.yml -n customer-namespace

      - name: Wait for rollout to finish
        run: |
          kubectl rollout status deployment/customer-ms -n customer-namespace
